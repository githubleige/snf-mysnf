<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
    <!--配置文件知识，引用于该网址:https://www.cnblogs.com/afeng2010/p/10133797.html-->

    <!--开启springmvc注解模式
        访问路径与方法的匹配可以通过注解配置
        若不加DispatcherServlet则无法区分请求是资源文件还是mvc的注解，而导致controller的请求报404错误
        自动扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求-->
    <mvc:annotation-driven />
    <!--静态页面，如html,css,js,images可以访问-->
    <mvc:default-servlet-handler/>
    <!--自动扫描相关的包-->
    <context:component-scan base-package="it.heima"/>
    <!--通过location，可以重新定义资源文件的位置-->
    <!--    <mvc:resources mapping="/style/**" location="/WEB-INF/style/"/>-->

    <!-- 整合Freemarker -->
    <!-- 放在InternalResourceViewResolver的前面，优先找freemarker -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="WEB-INF/freemarker/"/>
    </bean>
    <!--配置FreeMarker视图解析器,存在多种试图解析器-->
   <!-- 在视图解析器中有一个property name="order" value="orderValue"/的配置，这个配置表示解析器的优先级别。-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="prefix" value=""/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html; charset=UTF-8"/>
    </bean>

    <!--配置Spring MVC视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--使用JstlView对象来渲染结果-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <!--<property name="suffix" value="pre"/>-->
    </bean>

    <!--定义文件上传解析器-->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    &lt;!&ndash;默认编码&ndash;&gt;
    <property name="defaultEncoding" value="UTF-8"/>
    &lt;!&ndash;最大上传容量100MB,10*1024*1024&ndash;&gt;
    <property name="maxUploadSize" value="104857600"/>
    &lt;!&ndash;缓存&ndash;&gt;
    <property name="maxInMemorySize" value="4096"/>
    </bean>-->

    <!--注册拦截器-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash;拦截所有请求&ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash;不拦截的请求&ndash;&gt;
            <mvc:exclude-mapping path="/log/userLog"/>
            &lt;!&ndash;给出自定义拦截器&ndash;&gt;
            <bean class="com.interceptor.loginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->


    <!--解决Controller返回json时中文为乱码的Bean-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

</beans>
