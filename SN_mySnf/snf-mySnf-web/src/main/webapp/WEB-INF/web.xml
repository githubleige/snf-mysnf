<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- 如果你不用hessian，或是要单独做一个hessian服务工程，就请把sample-hessian.xml移除 -->
        <param-value>
            classpath:conf/spring/oms-integration.xml
        </param-value>
    </context-param>

    <!--此监听器主要用于解决java.beans.Introspector导致的内存泄漏的问题,配置在所欲监听器最前面-->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
    <!--ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息,开启spring容器。
    并把该spring容器作为参数传给servletContext-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>oms</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>
                classpath:conf/spring/oms-servlet.xml
            </param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>oms</servlet-name>
        <!--<url-pattern>*.hs</url-pattern> 新后台只接收所有的的请求-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--配置引用数据源到项目中,JNDI配置，到tomcat中去找-->
    <!--作用：
    您始终可以通过容器中配置的JNDI名称直接引用应用程序中的资源，但是，如果这样做，实际上是将特定于容器的名称连接到代码中。这有一些缺点，例如，如果以后由于某种原因想要更改名称，则需要更新所有应用程序中的所有引用，然后重新构建和重新部署它们。

    <resource-ref>引入了另一个间接层：在web.xml中指定要使用的名称，并根据容器在特定于容器的配置文件中提供绑定。

    所以这是发生了什么：假设您要查找java:comp/env/jdbc/primaryDB名称。容器发现web.xml具有的<resource-ref>元素jdbc/primaryDB，因此它将查看容器特定的配置，其中包含与以下内容类似的内容：

    <resource-ref>
        <res-ref-name>jdbc/primaryDB</res-ref-name>
        <jndi-name>jdbc/PrimaryDBInTheContainer</jndi-name>
    </resource-ref>
    最后，它返回以名称注册的对象jdbc/PrimaryDBInTheContainer。

    这个想法是，在web.xml中指定资源具有将开发者角色与部署者角色分开的优势。换句话说，作为开发人员，您不必知道生产中实际需要的资源是什么，而在部署应用程序的人员中，您将有一个不错的名称列表以映射到实际资源。-->
    <resource-ref>
        <res-ref-name>jdbc/TestDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

</web-app>